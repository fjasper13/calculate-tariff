package main

import "fmt"

type PaymentMethod int32
type Payment struct {
	OrderID      int64
	PaymentType  PaymentMethod
	PaymentValue float64
}
type Order struct {
	OrderID int64
	OrderNo string
	Payment Payment
}

func main() {
	orders := []Order{
		Order{
			OrderID: 1,
			OrderNo: "GEGE",
			Payment: Payment{
				OrderID:      1,
				PaymentType:  2,
				PaymentValue: 10000.0,
			},
		},
		Order{
			OrderID: 4,
			OrderNo: "QQ",
			Payment: Payment{
				OrderID:      2,
				PaymentType:  2,
				PaymentValue: 10000000000.0,
			},
		},
		Order{
			OrderID: 3,
			OrderNo: "QQ",
			Payment: Payment{
				OrderID:      2,
				PaymentType:  5,
				PaymentValue: 1000.0,
			},
		},
		Order{
			OrderID: 2,
			OrderNo: "QQ",
			Payment: Payment{
				OrderID:      2,
				PaymentType:  5,
				PaymentValue: 100000.0,
			},
		},
		Order{
			OrderID: 2,
			OrderNo: "QQ",
			Payment: Payment{
				OrderID:      2,
				PaymentType:  3,
				PaymentValue: 11.0,
			},
		},
	}

	orderIDs := []int64{1, 4, 3, 2, 2}

	orderIDs, orders = checkDuplicate(orderIDs, orders)

	fmt.Println(orders)
	fmt.Println(orderIDs)

}

func checkDuplicate(orderIDs []int64, orders []Order) ([]int64, []Order) {
	type tempVar struct {
		PaymentValue float64
		index        int
	}
	tempMap := make(map[int64]tempVar)
	var newOrder []Order
	var newOrderID []int64

	for i, v := range orders {
		if _, ok := tempMap[v.OrderID]; !ok {
			newOrderID = append(newOrderID, v.OrderID)
			newOrder = append(newOrder, v)
			tempMap[v.OrderID] = tempVar{
				PaymentValue: v.Payment.PaymentValue,
				index:        i,
			}
		} else {
			if v.Payment.PaymentValue < tempMap[v.OrderID].PaymentValue {
				newOrderID[tempMap[v.OrderID].index] = v.OrderID
				newOrder[tempMap[v.OrderID].index] = v
				tempMap[v.OrderID] = tempVar{
					PaymentValue: v.Payment.PaymentValue,
					index:        tempMap[v.OrderID].index,
				}
			}
		}
	}
	return newOrderID, newOrder
}
